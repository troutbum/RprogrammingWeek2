source("http://bioconductor.org/biocLite.R")
biocLite("cummeRbund")
version
install.packages(c("boot", "class", "cluster", "foreign", "gdata", "gplots", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial"))
library("swirl")swirl()
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
z
?c
?nrow
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rec(c(0,1,2),times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect < 1
tf
num_vect >= 6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Gene")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1,2,3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData <-sample(c(y,z), 100)
myNA<-is.na(myData)
print(myNA)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf= NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
matrix(1:20,4,5)
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients, myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(myData,cnames)
colnames(myData)<-cnames
myData
a <- available.package()
a <- available.packages()
head(rownames(a),10)
View(a)
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 0
x <- 1:10
if(x > 5) {
print(x)
}
x
x > 5
if(x[1] > 5)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x == 1) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
setwd("~/CourseraHW/RprogrammingWeek2")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate")
x <- read.csv("specdata/007.csv")
View(x)
# R Programming - April 2014
# Programming Assignment 1 Part 1
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
# The zip file containing the data can be downloaded here: specdata.zip [2.4MB]
# The zip file contains 332 comma-separated-value (CSV) files containing
# pollution monitoring data for fine particulate matter (PM) air pollution at
# 332 locations in the United States. Each file contains data from a single
# monitor and the ID number for each monitor is contained in the file name. For
# example, data for monitor 200 is contained in the file "200.csv". Each file
# contains three variables: Date: the date of the observation in YYYY-MM-DD
# format (year-month-day) sulfate: the level of sulfate PM in the air on that
# date (measured in micrograms per cubic meter) nitrate: the level of nitrate PM
# in the air on that date (measured in micrograms per cubic meter) For this
# programming assignment you will need to unzip this file and create the
# directory 'specdata'. Once you have unzipped the zip file, do not make any
# modifications to the files in the 'specdata' directory. In each file you'll
# notice that there are many days where either sulfate or nitrate (or both) are
# missing (coded as NA). This is common with air pollution monitoring data in
# the United States.
# Part 1 Write a function named 'pollutantmean' that calculates the mean of a
# pollutant (sulfate or nitrate) across a specified list of monitors. The
# function 'pollutantmean' takes three arguments: 'directory', 'pollutant', and
# 'id'. Given a vector monitor ID numbers, 'pollutantmean' reads that monitors'
# particulate matter data from the directory specified in the 'directory'
# argument and returns the mean of the pollutant across all of the monitors,
# ignoring any missing values coded as NA. A prototype of the function is as
# follows pollutantmean <- function(directory, pollutant, id = 1:332) { ##
# 'directory' is a character vector of length 1 indicating ## the location of
# the CSV files
#
# ## 'pollutant' is a character vector of length 1 indicating ## the name of the
# pollutant for which we will calculate the ## mean; either "sulfate" or
# "nitrate".
#
# ## 'id' is an integer vector indicating the monitor ID numbers ## to be used
#
# ## Return the mean of the pollutant across all monitors list ## in the 'id'
# vector (ignoring NA values) } You can see some example output from this
# function. The function that you write should be able to match this output.
# Please save your code to a file named pollutantmean.R.
x <- read.csv("specdata/007.csv")
na.x <- is.na(x)
complete.x <- x[!na.x]
mean(complete.x)
nrow(x)
complete.cases(x)
x <- read.csv("specdata/007.csv")
good <- complete.cases(x)
good.x <- x[good,]
View(good.x)
y <- x[good,][,"ID"]
nrow(good.x)
ID <- x[1,"ID"]
ID
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
